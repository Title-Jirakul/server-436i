/**
 * [https://github.com/nodemailer/nodemailer/]
 */
import nodemailer from "nodemailer";

/**
 * [https://github.com/orliesaurus/nodemailer-mailgun-transport]
 */
import mg from "nodemailer-mailgun-transport";

/**
 * @Helpers
 */
import ErrorHandler from "../../errors/ErrorHandler";
import StatusCodes from "../../api/StatusCodes";
import MailgunConfig from "./MailgunConfig";

function SetupNodemailer (): Promise<nodemailer.Transporter> {
  return new Promise(function (resolve: (t: nodemailer.Transporter) => void, reject: (e: Error) => void) {
    
    const { MAILGUN_API_KEY } = process.env;
  
    if (!MAILGUN_API_KEY) {
      return reject(new ErrorHandler(
        "Mailgun Undefined", 
        StatusCodes.INTERNAL_SERVER_ERROR, 
        "Mailgun is undefined."
      ));
    }

    const authOptions: mg.AuthOptions = {
      // eslint-disable-next-line @typescript-eslint/camelcase
      api_key: MAILGUN_API_KEY,
      domain: MailgunConfig.domain
    }; 
    
    const auth: mg.Options = { auth: authOptions };
    const transporter = nodemailer.createTransport(mg(auth));

    // Verify connection configuration
    transporter.verify((error: Error | null) => {
      if (error) {
        return reject (new ErrorHandler (
          "Unauthorized Mailgun", 
          StatusCodes.INTERNAL_SERVER_ERROR,
          "The domain is unverified and requires DNS configuration."
        ));
      }

      return resolve(transporter);
    });
  });
}

function Nodemailer (name: string, email: string): Promise<void> {
  return SetupNodemailer().then((mail: nodemailer.Transporter) => {
    if(!mail) {
      throw new ErrorHandler (
        "Unauthorized Mailgun", 
        StatusCodes.INTERNAL_SERVER_ERROR,
        "The domain is unverified and requires DNS configuration."
      );
    }

    const mailOptions = {
      from: MailgunConfig.sender,
      to: `${name} <${email}>`,
      subject: "Reset Password",
      html: `
        <p>
          Click on the following link to reset your password: <a href="${}">Reset Password</a>
        </p>
      `
    };
  
    console.log("MAIL OPTIONS = ", mailOptions)
  
    mail.sendMail(mailOptions, (err: Error | null, info: string) => {
      if(err) {
  
        console.log("HIT ERROR ON SEND MAIL = ", err);
        
        throw new ErrorHandler(
          "Mail Error", 
          StatusCodes.INTERNAL_SERVER_ERROR, 
          "Could not send email."
        );
      }
  
      console.log("Info from Message Sent = ", info);
  
      return info;
    });

  });
}

export default Nodemailer;